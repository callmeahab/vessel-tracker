version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vessel-tracker-db
    environment:
      POSTGRES_DB: vessel_tracker
      POSTGRES_USER: vessel_user
      POSTGRES_PASSWORD: vessel_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - vessel-tracker-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vessel-tracker-backend
    environment:
      - GIN_MODE=release
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=vessel_tracker
      - DB_USER=vessel_user
      - DB_PASSWORD=vessel_password
      - PORT=4000
    ports:
      - "4000:4000"
    depends_on:
      - postgres
    networks:
      - vessel-tracker-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Web Application
  frontend:
    build:
      context: ./vessel-tracker-web
      dockerfile: Dockerfile
    container_name: vessel-tracker-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:4000
      - PORT=5000
    ports:
      - "5000:5000"
    depends_on:
      - backend
    networks:
      - vessel-tracker-network
    restart: unless-stopped

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: vessel-tracker-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - vessel-tracker-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  vessel-tracker-network:
    driver: bridge